services:
  # Logging
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:${ELASTIC_VERSION}
    container_name: elasticsearch_fourstory
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - ES_JAVA_OPTS=-Xms1g -Xmx1g
    ports:
      - "9200:9200"
    volumes:
      - esdata:/usr/share/elasticsearch/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -fsS http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  kibana:
    image: docker.elastic.co/kibana/kibana:${ELASTIC_VERSION}
    container_name: kibana_fourstory
    environment:
      ELASTICSEARCH_HOSTS: "http://elasticsearch:9200"
    ports:
      - "5601:5601"
    depends_on:
      elasticsearch:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -fsS http://localhost:5601/api/status || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  logstash:
    image: docker.elastic.co/logstash/logstash:${ELASTIC_VERSION}
    container_name: logstash_fourstory
    ports:
      - "5000:5000"
    volumes:
      - ./elk/logstash/pipeline:/usr/share/logstash/pipeline:ro
      - ./elk/logstash/config/logstash.yml:/usr/share/logstash/config/logstash.yml:ro
    depends_on:
      elasticsearch:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -fsS http://localhost:9600/_node/stats || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  # Monitoring
  prometheus:
    image: prom/prometheus:v3.5.0
    container_name: prometheus_fourstory
    ports:
    - "9090:9090"
    volumes:
    - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
    restart: unless-stopped

  grafana:
    image: grafana/grafana:12.1.0
    container_name: grafana_fourstory
    ports:
    - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_ADMIN_USER}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD}
    restart: unless-stopped

  # MSSQL Database
  sqlserver:
    image: mcr.microsoft.com/mssql/server:2022-latest
    container_name: sqlserver
    environment:
      ACCEPT_EULA: "Y"
      SA_PASSWORD: ${SQL_SERVER_PASSWORD}
    ports:
      - "1433:1433"
    volumes:
      - sqlserverdata:/var/opt/mssql
      - ./backups:/var/opt/mssql/backups
    restart: unless-stopped

  # Web API Application
  app:
    build: .
    container_name: fourstory-web-api
    ports:
      - "8080:8080"
    environment:
      SQL_SERVER_USERNAME: ${SQL_SERVER_USERNAME}
      SQL_SERVER_PASSWORD: ${SQL_SERVER_PASSWORD}
      SQL_SERVER_TGAME_URL: ${SQL_SERVER_TGAME_URL}
      SQL_SERVER_TGLOBAL_URL: ${SQL_SERVER_TGLOBAL_URL}
    restart: unless-stopped
    depends_on:
      logstash:
        condition: service_healthy

volumes:
  sqlserverdata:
  esdata: